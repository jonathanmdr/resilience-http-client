name: ecommerce

services:

  order-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: order-manager:latest
    container_name: order-api
    entrypoint: ["java", "-javaagent:otel.jar", "-jar", "order-api.jar"]
    hostname: order-api
    restart: "no"
    environment:
      OTEL_METRICS_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: gzip
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://otel-collector:4318/v1/metrics
      OTEL_TRACES_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: gzip
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4318/v1/traces
      OTEL_LOGS_EXPORTER: none
      OTEL_SERVICE_NAME: order-api
      DATABASE_URL: mysql-orders:3306
      KAFKA_BROKER_HOSTS: kafka-broker:19092
      KAFKA_PROTOCOL: PLAINTEXT
      AUTHORIZATION_CLIENT_BASE_URL: http://authorization-api:8081
    ports:
      - "8080:8080"
    depends_on:
      - mysql-orders
      - kafka-broker
      - authorization-api
      - otel-collector
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD-SHELL", "/app/healthcheck.sh order-api api http://order-api:8080/health" ]
      interval: 15s
      timeout: 5s
      retries: 6
    profiles:
      - services

  authorization-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: order-manager:latest
    container_name: authorization-api
    entrypoint: [ "java", "-javaagent:otel.jar", "-jar", "authorization-api.jar" ]
    hostname: authorization-api
    restart: "no"
    environment:
      OTEL_METRICS_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: gzip
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://otel-collector:4318/v1/metrics
      OTEL_TRACES_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: gzip
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4318/v1/traces
      OTEL_LOGS_EXPORTER: none
      OTEL_SERVICE_NAME: authorization-api
      DATABASE_URL: mysql-authorizations:3306
    ports:
      - "8081:8081"
    depends_on:
      - mysql-authorizations
      - otel-collector
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD-SHELL", "/app/healthcheck.sh authorization-api api http://authorization-api:8081/health" ]
      interval: 15s
      timeout: 5s
      retries: 6
    profiles:
      - services

  order-worker:
    build:
      context: .
      dockerfile: Dockerfile
    image: order-manager:latest
    container_name: order-worker
    entrypoint: [ "java", "-javaagent:otel.jar", "-jar", "order-worker.jar" ]
    hostname: order-worker
    restart: "no"
    environment:
      OTEL_METRICS_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: gzip
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://otel-collector:4318/v1/metrics
      OTEL_TRACES_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: gzip
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4318/v1/traces
      OTEL_LOGS_EXPORTER: none
      OTEL_SERVICE_NAME: order-worker
      DATABASE_URL: mysql-orders:3306
      KAFKA_BROKER_HOSTS: kafka-broker:19092
      KAFKA_PROTOCOL: PLAINTEXT
    depends_on:
      - mysql-orders
      - kafka-broker
      - otel-collector
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD-SHELL", "/app/healthcheck.sh order-worker worker order-worker.jar" ]
      interval: 15s
      timeout: 5s
      retries: 6
    profiles:
      - services

  audit-worker:
    build:
      context: .
      dockerfile: Dockerfile
    image: order-manager:latest
    container_name: audit-worker
    entrypoint: [ "java", "-javaagent:otel.jar", "-jar", "audit-worker.jar" ]
    hostname: audit-worker
    restart: "no"
    environment:
      OTEL_METRICS_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: gzip
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://otel-collector:4318/v1/metrics
      OTEL_TRACES_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: gzip
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://otel-collector:4318/v1/traces
      OTEL_LOGS_EXPORTER: none
      OTEL_SERVICE_NAME: audit-worker
      DATABASE_URL: mongodb-audit:27017
      KAFKA_BROKER_HOSTS: kafka-broker:19092
      KAFKA_PROTOCOL: PLAINTEXT
    depends_on:
      - mongodb-audit
      - kafka-broker
      - otel-collector
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD-SHELL", "/app/healthcheck.sh audit-worker worker audit-worker.jar" ]
      interval: 15s
      timeout: 5s
      retries: 6
    profiles:
      - services

  mysql-orders:
    image: docker.io/bitnami/mysql:8.0
    container_name: mysql-orders
    hostname: mysql-orders
    restart: "no"
    environment:
      MYSQL_USER: admin
      MYSQL_DATABASE: orders
      ALLOW_EMPTY_PASSWORD: yes
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3306:3306"
    volumes:
      - mysql-order-api-data:/bitnami/mysql/data
      - .migrations/orders/V0001_create-table-orders.sql:/docker-entrypoint-initdb.d/V0001_create-table-orders.sql
      - .migrations/orders/V0002_create-table-authorizations-processed-dlt.sql:/docker-entrypoint-initdb.d/V0002_create-table-authorizations-processed-dlt.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "/opt/bitnami/scripts/mysql/healthcheck.sh" ]
      interval: 15s
      timeout: 5s
      retries: 6
    profiles:
      - stack

  mongodb-audit:
    image: mongo:8.0
    container_name: mongodb-audit
    hostname: mongodb-audit
    restart: "no"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: audit
    ports:
      - "27017:27017"
    volumes:
      - .migrations/audit:/docker-entrypoint-initdb.d
      - mongodb-data:/data/db
    networks:
      - ecommerce-network
    profiles:
      - stack

  mysql-authorizations:
    image: docker.io/bitnami/mysql:8.0
    container_name: mysql-authorizations
    hostname: mysql-authorizations
    restart: "no"
    environment:
      MYSQL_USER: admin
      MYSQL_DATABASE: authorizations
      ALLOW_EMPTY_PASSWORD: yes
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3307:3306"
    volumes:
      - mysql-authorization-api-data:/bitnami/mysql/data
      - .migrations/authorizations/V0001_create-table-authorizations.sql:/docker-entrypoint-initdb.d/V0001_create-table-authorizations.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "/opt/bitnami/scripts/mysql/healthcheck.sh" ]
      interval: 15s
      timeout: 5s
      retries: 6
    profiles:
      - stack

  kafka-broker:
    image: docker.io/bitnami/kafka:3.7
    container_name: kafka-broker
    hostname: kafka-broker
    restart: "no"
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-broker:19192
      KAFKA_CFG_LISTENERS: "LISTENER_DOCKER_INTERNAL://:19092,CONTROLLER://:19192,LISTENER_DOCKER_EXTERNAL://:9092"
      KAFKA_CFG_ADVERTISED_LISTENERS: "LISTENER_DOCKER_INTERNAL://kafka-broker:19092,LISTENER_DOCKER_EXTERNAL://localhost:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "LISTENER_DOCKER_INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:SASL_PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "LISTENER_DOCKER_INTERNAL"
      KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL: "PLAIN"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_SASL_MECHANISM_CONTROLLER_PROTOCOL: "PLAIN"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_INTER_BROKER_USER: admin
      KAFKA_INTER_BROKER_PASSWORD: admin
      KAFKA_CLIENT_USERS: order-api;order-worker;audit-worker
      KAFKA_CLIENT_PASSWORDS: order-api;order-worker;audit-worker
    networks:
      - ecommerce-network
    volumes:
      - kafka-order-api-data:/bitnami
    profiles:
      - stack

  kafka-connect:
    image: debezium/connect:3.0.0.Final
    container_name: kafka-connect
    hostname: kafka-connect
    restart: "no"
    ports:
      - "8083:8083"
    environment:
      CONFIG_STORAGE_TOPIC: connect-cdc-storage-configs
      OFFSET_STORAGE_TOPIC: connect-cdc-storage-offsets
      STATUS_STORAGE_TOPIC: connect-cdc-storage-statuses
      BOOTSTRAP_SERVERS: kafka-broker:19092
    depends_on:
      - kafka-broker
      - mysql-orders
      - mysql-authorizations
    networks:
      - ecommerce-network
    volumes:
      - .otel-dev/otel.jar:/kafka/otel/otel.jar
      - kafka-connect-data:/kafka/data
      - kafka-connect-data:/kafka/logs
      - kafka-connect-data:/kafka/config
    profiles:
      - stack

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: "no"
    environment:
      KAFKA_CLUSTERS_0_NAME: ecommerce
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker:19092
    ports:
      - "8580:8080"
    depends_on:
      - kafka-broker
    networks:
      - ecommerce-network
    profiles:
      - stack

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    hostname: jaeger
    restart: "no"
    environment:
      COLLECTOR_OTLP_ENABLED: true
      METRICS_STORAGE_TYPE: prometheus
      PROMETHEUS_SERVER_URL: http://prometheus:9090
    ports:
      # Web Interface
      - "16686:16686"
    depends_on:
      - prometheus
    networks:
      - ecommerce-network
    profiles:
      - stack

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.68.0
    container_name: otel-collector
    hostname: otel-collector
    restart: "no"
    command:
      - --config=/etc/otel-collector-config.yaml
    ports:
      # gRPC port
      - "4317:4317"
      # HTTP port
      - "4318:4318"
      # Otel collector metrics port
      - "8888:8888"
      # Span metrics port
      - "9999:9999"
    volumes:
      - .otel-dev/otel-collector.yaml:/etc/otel-collector-config.yaml
    depends_on:
      - jaeger
      - prometheus
    networks:
      - ecommerce-network
    profiles:
      - stack

  prometheus:
    image: prom/prometheus:v2.41.0
    container_name: prometheus
    hostname: prometheus
    restart: "no"
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-remote-write-receiver
    ports:
      - "9090:9090"
    volumes:
      - .otel-dev/prometheus.yaml:/etc/prometheus/prometheus.yml
    networks:
      - ecommerce-network
    profiles:
      - stack

  grafana:
    image: grafana/grafana:9.3.2
    container_name: grafana
    hostname: grafana
    restart: "no"
    environment:
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_BASIC_ENABLED: false
    ports:
      - "3000:3000"
    volumes:
      - .otel-dev/ds-prometheus.yaml:/etc/grafana/provisioning/datasources/datasource.yml
    depends_on:
      - prometheus
    networks:
      - ecommerce-network
    profiles:
      - stack

networks:
  ecommerce-network:
    driver: bridge

volumes:
  mysql-order-api-data:
    driver: local
  mysql-authorization-api-data:
    driver: local
  mongodb-data:
    driver: local
  kafka-order-api-data:
    driver: local
  kafka-connect-data:
    driver: local
